create_boot_directory

proc depot_user {} { return [get_cmd_arg --depot-user genodelabs] }

import_from_depot [depot_user]/src/[base_src] \
                  [depot_user]/pkg/[drivers_nic_pkg] \
                  [depot_user]/pkg/genodians \
                  [depot_user]/pkg/system_rtc-[board] \
                  [depot_user]/src/vfs_import \
                  [depot_user]/src/vfs_jitterentropy \
                  [depot_user]/src/fs_report \
                  [depot_user]/src/fs_query \
                  [depot_user]/src/report_rom

install_config {

<config prio_levels="2">

	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>

	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>

	<default caps="100"/>

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
		<config/>
	</start>

	<start name="system_rtc" caps="1000">
		<resource name="RAM" quantum="6M"/>
		<binary name="init"/>
		<provides> <service name="Rtc"/> </provides>
		<route>
			<service name="ROM" label="config"> <parent label="system_rtc.config"/> </service>
			<service name="IO_MEM">  <parent/> </service>
			<service name="IO_PORT"> <parent/> </service>
			<service name="IRQ">     <parent/> </service>
			<service name="LOG">     <parent/> </service>
			<service name="PD">      <parent/> </service>
			<service name="RM">      <parent/> </service>
			<service name="CPU">     <parent/> </service>
			<service name="ROM">     <parent/> </service>
			<service name="Timer">   <child name="timer"/> </service>
		</route>
	</start>


	<start name="drivers" caps="1000" managing_system="yes">
		<resource name="RAM" quantum="32M"/>
		<binary name="init"/>
		<provides> <service name="Nic"/> </provides>
		<route>
			<service name="ROM" label="config"> <parent label="drivers.config"/> </service>
			<service name="IO_MEM">  <parent/> </service>
			<service name="IO_PORT"> <parent/> </service>
			<service name="IRQ">     <parent/> </service>
			<service name="LOG">     <parent/> </service>
			<service name="PD">      <parent/> </service>
			<service name="RM">      <parent/> </service>
			<service name="CPU">     <parent/> </service>
			<service name="ROM">     <parent/> </service>
			<service name="Timer">   <child name="timer"/> </service>
			<service name="Uplink">  <child name="genodians"/> </service>
		</route>
	</start>

	<start name="genodians" caps="6000" priority="-1">
		<resource name="RAM" quantum="768M"/>
		<binary name="init"/>
		<provides> <service name="Uplink"/> </provides>
		<route>
			<service name="ROM" label="config"> <parent label="genodians.config"/> </service>
			<service name="LOG">   <parent/> </service>
			<service name="PD">    <parent/> </service>
			<service name="RM">    <parent/> </service>
			<service name="CPU">   <parent/> </service>
			<service name="ROM">   <parent/> </service>
			<service name="Timer"> <child name="timer"/> </service>
			<service name="Nic">   <child name="drivers"/> </service>
			<service name="Rtc">   <child name="system_rtc"/> </service>
		</route>
	</start>

</config>}


if {[expr ![file exists bin/privkey.pem] || ![file exists bin/fullchain.pem]]} {
	puts "Certificate chain 'fullchain.pem' or private key 'privkey.pem' missing. Please execute"
	puts ""
	puts " openssl req -new -x509 -keyout bin/privkey.pem -out bin/fullchain.pem -days 365 -nodes"
	puts ""
	puts "or provide your own files in bin/fullchain.pem resp. bin/privkey.pem."
	puts ""
	exit 0
}

if {[catch {set size [file size bin/upload-user.conf]}] || $size < 69} {
	puts "You may provide bin/upload-user.conf to permit uploading to lighttpd"
	puts "in htdigest sha-256 format, for example, created like follows."
	puts ""
	puts " echo user:upload:\$(echo -n user:upload:passw0rd | sha256sum | head -c 64) > bin/upload-user.conf"

	set fh [open bin/upload-user.conf w]
	puts $fh "# empty"
	close $fh
}

build { app/genodians_manager }
build_boot_image [list {*}[build_artifacts] fullchain.pem privkey.pem upload-user.conf ]

append qemu_args " -m 1000 "
append qemu_args " -netdev user,id=net0,hostfwd=tcp::5555-:80,hostfwd=tcp::5556-:443 "
append qemu_args " -nographic -serial mon:stdio "

run_genode_until forever
